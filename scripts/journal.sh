#!/bin/bash
# 📝 Daily Work Journal - Unified Management System with Calendar Integration
# A comprehensive, intelligent daily journaling system with timestamp tracking, Slack, and Google Calendar automation
# Version 2.1 - Enhanced with Google Calendar integration

set -euo pipefail

# ==================== CONFIGURATION ====================
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
readonly JOURNAL_DIR="$PROJECT_DIR/logs"
readonly CONFIG_DIR="$PROJECT_DIR/config"
readonly TODAY=$(date +%Y-%m-%d)
readonly YESTERDAY=$(date -v-1d +%Y-%m-%d 2>/dev/null || date -d "yesterday" +%Y-%m-%d)
readonly TOMORROW=$(date -v+1d +%Y-%m-%d 2>/dev/null || date -d "tomorrow" +%Y-%m-%d)
readonly JOURNAL_FILE="$JOURNAL_DIR/$TODAY.md"
readonly TIMESTAMP_LOG="$JOURNAL_DIR/.activity.log"
readonly VERSION="2.1.0"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

# ==================== CORE FUNCTIONS ====================

# Enhanced logging with levels and colors
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local color=""
    
    case "$level" in
        "ERROR")   color="$RED" ;;
        "SUCCESS") color="$GREEN" ;;
        "WARN")    color="$YELLOW" ;;
        "INFO")    color="$BLUE" ;;
        "DEBUG")   color="$PURPLE" ;;
        *)         color="$NC" ;;
    esac
    
    echo -e "${color}[$level]${NC} $message"
    echo "[$timestamp] [$level] $message" >> "$TIMESTAMP_LOG"
}

# Smart error handling
error_exit() {
    log "ERROR" "$1"
    exit "${2:-1}"
}

# Ensure required directories exist
init_directories() {
    mkdir -p "$JOURNAL_DIR" "$CONFIG_DIR"
    touch "$TIMESTAMP_LOG"
}

# ==================== JOURNAL TEMPLATE SYSTEM ====================

# Enhanced journal template with calendar integration
generate_journal_template() {
    local cursor_activity=""
    local yesterday_todos=""
    
    # Extract yesterday's incomplete todos
    if [[ -f "$JOURNAL_DIR/$YESTERDAY.md" ]]; then
        yesterday_todos=$(grep "^- \[ \]" "$JOURNAL_DIR/$YESTERDAY.md" 2>/dev/null | head -5 || echo "")
    fi
    
    # Check for Cursor activity integration
    local cursor_logs="$HOME/Development/tools/cursor-logging/logs"
    if [[ -f "$cursor_logs/cursor-activity-$TODAY.md" ]]; then
        cursor_activity="*Auto-detected from Cursor logs*"
    else
        cursor_activity="*Manual entry*"
    fi
    
    cat > "$JOURNAL_FILE" << EOF
# 📝 $TODAY - $(date '+%A')

**Generated:** $(date '+%Y-%m-%d %H:%M:%S') | **Week:** $(date '+%U')/$(date '+%Y')

## 🎯 Focus & Status
**Today's Mission:** 
**Current Status:** 🟡 In Progress
**Energy Level:** ⚡⚡⚡⚡⚪ (4/5)

---

## 📅 Calendar & Schedule

### Today's Events
*Run: \`./journal.sh calendar\` to populate*

### Key Meetings
- 

### Time Blocks
- 

---

## ✅ Tasks & Priorities

### Carried Forward
$( [[ -n "$yesterday_todos" ]] && echo "$yesterday_todos" || echo "- [ ] No pending items" )

### Today's Goals
- [ ] 
- [ ] 
- [ ] 

### ✨ Completed
- [x] Generated daily journal

---

## 💻 Development Work
$cursor_activity

### Active Projects
- 

### Code & Commits
- 

---

## 💬 Team & Communication

### Slack Activity
*Run: \`./journal.sh slack\` to populate*

### Key Conversations
- 

### Decisions Made
- 

---

## 🧠 Learning & Growth

### Insights
- 

### Resources Found
- 

---

## 🎉 Wins & Challenges

### Today's Wins
- 

### Blockers Resolved
- 

### Still Blocked
- 

---

## 🔮 Tomorrow's Plan
- [ ] 
- [ ] 
- [ ] 

---
*Generated by Daily Work Journal v$VERSION*
EOF

    log "SUCCESS" "Journal created: $JOURNAL_FILE"
}

# ==================== GOOGLE CALENDAR INTEGRATION ====================

# Update calendar context in journal
update_calendar_context() {
    log "INFO" "Updating calendar context..."
    
    local user_status="🟡 Pending"
    local instructions=""
    local current_hour=$(date +%H)
    
    # Check if user is likely available (heuristic)
    if [[ $current_hour -ge 9 && $current_hour -le 18 ]]; then
        user_status="🟢 Ready"
        instructions="**Action:** Open Cursor and run MCP commands below"
    else
        user_status="🟡 Queued"
        instructions="**Action:** Will auto-run during work hours (9-18)"
    fi
    
    # Replace the Calendar & Schedule section
    if [[ -f "$JOURNAL_FILE" ]]; then
        local temp_file=$(mktemp)
        
        # Create the replacement section in a temporary file first
        cat > "${temp_file}.section" << EOF

## 📅 Calendar & Schedule

### 🤖 Calendar Auto-Update
**Status:** $user_status | **Updated:** $(date '+%H:%M')
$instructions

### 📱 MCP Commands (Copy to Cursor)
\`\`\`
1. mcp_gworkspace_calendar_events time_min="$TODAY" time_max="$TOMORROW"
2. mcp_gworkspace_calendar_availability email_list=["your-email@shopify.com"]
3. mcp_gworkspace_list_calendars
\`\`\`

### Today's Events
*Results will appear here after running MCP commands*

### Key Meetings
- 

### Time Blocks
- 

### Availability Gaps
- 
EOF
        
        # Use awk to replace the section
        awk '
        /^## 📅 Calendar & Schedule/ {
            system("cat '"${temp_file}.section"'")
            skip = 1
            next
        }
        /^## / && skip {
            skip = 0
        }
        !skip { print }
        ' "$JOURNAL_FILE" > "$temp_file"
        
        mv "$temp_file" "$JOURNAL_FILE"
        rm -f "${temp_file}.section"
        log "SUCCESS" "Calendar context updated"
    else
        error_exit "Journal file not found: $JOURNAL_FILE"
    fi
}

# Mark calendar update as complete
mark_calendar_complete() {
    if [[ -f "$JOURNAL_FILE" ]]; then
        sed -i.bak 's/🟡 Pending\|🟡 Queued/🟢 Completed/' "$JOURNAL_FILE"
        sed -i.bak 's/🟢 Ready/🟢 Completed/' "$JOURNAL_FILE"
        rm -f "$JOURNAL_FILE.bak"
        log "SUCCESS" "Calendar update marked as completed"
    fi
}

# ==================== SLACK INTEGRATION ====================

# Intelligent Slack context gathering
update_slack_context() {
    log "INFO" "Updating Slack context..."
    
    local user_status="🟡 Pending"
    local instructions=""
    
    # Check if user is likely available (heuristic)
    if [[ $(date +%H) -ge 9 && $(date +%H) -le 18 ]]; then
        user_status="🟢 Ready"
        instructions="**Action:** Open Cursor and run MCP commands below"
    else
        user_status="🟡 Queued"
        instructions="**Action:** Will auto-run during work hours (9-18)"
    fi
    
    # Replace the Team & Communication section
    if [[ -f "$JOURNAL_FILE" ]]; then
        local temp_file=$(mktemp)
        
        # Create the replacement section in a temporary file first
        cat > "${temp_file}.section" << EOF

## 💬 Team & Communication

### 🤖 Slack Auto-Update
**Status:** $user_status | **Updated:** $(date '+%H:%M')
$instructions

### 📱 MCP Commands (Copy to Cursor)
\`\`\`
1. mcp_slack-tools-mcp_slack_my_messages since="$TODAY" count=100
2. Search: "escalation analysis", "cursor logging", "daily journal"  
3. mcp_slack-tools-mcp_slack_get_status
4. Search: 'TODO OR "action item" OR "follow up"'
\`\`\`

### Slack Activity
*Results will appear here after running MCP commands*

### Key Conversations
- 

### Decisions Made
- 
EOF
        
        # Use awk to replace the section
        awk '
        /^## 💬 Team & Communication/ {
            system("cat '"${temp_file}.section"'")
            skip = 1
            next
        }
        /^## / && skip {
            skip = 0
        }
        !skip { print }
        ' "$JOURNAL_FILE" > "$temp_file"
        
        mv "$temp_file" "$JOURNAL_FILE"
        rm -f "${temp_file}.section"
        log "SUCCESS" "Slack context updated"
    else
        error_exit "Journal file not found: $JOURNAL_FILE"
    fi
}

# Mark Slack update as complete
mark_slack_complete() {
    if [[ -f "$JOURNAL_FILE" ]]; then
        sed -i.bak 's/🟡 Pending\|🟡 Queued/🟢 Completed/' "$JOURNAL_FILE"
        sed -i.bak 's/🟢 Ready/🟢 Completed/' "$JOURNAL_FILE"
        rm -f "$JOURNAL_FILE.bak"
        log "SUCCESS" "Slack update marked as completed"
    fi
}

# ==================== INTEGRATED AUTOMATION ====================

# Update both Slack and Calendar contexts
update_all_contexts() {
    log "INFO" "Updating all integrations (Slack + Calendar)..."
    update_calendar_context
    update_slack_context
    log "SUCCESS" "All contexts updated - ready for MCP commands"
}

# Mark all integrations as complete
mark_all_complete() {
    log "INFO" "Marking all integrations as complete..."
    mark_calendar_complete
    mark_slack_complete
    log "SUCCESS" "All integrations marked as completed"
}

# ==================== TIMESTAMP & ANALYTICS ====================

# Add timestamped entry to any section
add_entry() {
    local section="$1"
    local entry="$2"
    local timestamp=$(date '+%H:%M')
    
    if [[ ! -f "$JOURNAL_FILE" ]]; then
        error_exit "Journal file not found. Run 'journal.sh create' first."
    fi
    
    # Find section and add entry
    local temp_file=$(mktemp)
    awk -v section="$section" -v entry="- [$timestamp] $entry" '
    /^## / {
        if (found_section && !entry_added) {
            print entry
            print ""
            entry_added = 1
        }
        if ($0 ~ section) {
            found_section = 1
        } else {
            found_section = 0
        }
    }
    { print }
    END {
        if (found_section && !entry_added) {
            print entry
        }
    }
    ' found_section=0 entry_added=0 "$JOURNAL_FILE" > "$temp_file"
    
    mv "$temp_file" "$JOURNAL_FILE"
    log "SUCCESS" "Added entry to $section: $entry"
}

# Generate activity analytics
show_analytics() {
    echo -e "${CYAN}📊 Daily Journal Analytics${NC}"
    echo "================================"
    echo "Date: $TODAY"
    echo "Journal: $(basename "$JOURNAL_FILE")"
    echo ""
    
    if [[ -f "$JOURNAL_FILE" ]]; then
        local lines=$(wc -l < "$JOURNAL_FILE")
        local completed=$(grep -c "^- \[x\]" "$JOURNAL_FILE" 2>/dev/null || echo "0")
        local pending=$(grep -c "^- \[ \]" "$JOURNAL_FILE" 2>/dev/null || echo "0")
        local timestamps=$(grep -o '\[[0-9][0-9]:[0-9][0-9]\]' "$JOURNAL_FILE" 2>/dev/null | wc -l || echo "0")
        local calendar_status=$(grep "Calendar Auto-Update" -A1 "$JOURNAL_FILE" | grep Status | sed 's/.*Status: \([^|]*\).*/\1/' | tr -d ' ' || echo "N/A")
        local slack_status=$(grep "Slack Auto-Update" -A1 "$JOURNAL_FILE" | grep Status | sed 's/.*Status: \([^|]*\).*/\1/' | tr -d ' ' || echo "N/A")
        
        echo "📝 Content: $lines lines"
        echo "✅ Completed: $completed tasks"
        echo "⏳ Pending: $pending tasks"
        echo "🕒 Timestamped entries: $timestamps"
        echo "📅 Calendar status: $calendar_status"
        echo "💬 Slack status: $slack_status"
        echo ""
        
        echo "🕒 Recent activity:"
        grep -o '\[[0-9][0-9]:[0-9][0-9]\]' "$JOURNAL_FILE" 2>/dev/null | sort | tail -5 | sed 's/^/  /' || echo "  No timestamped entries yet"
    else
        echo "❌ No journal found for today"
    fi
    
    echo ""
    echo "📈 Activity log:"
    tail -5 "$TIMESTAMP_LOG" 2>/dev/null | sed 's/^/  /' || echo "  No activity logged yet"
}

# ==================== AUTOMATION SYSTEM ====================

# Setup macOS automation with enhanced scheduling
setup_automation() {
    log "INFO" "Setting up enhanced automation with calendar integration..."
    
    local plist_file="$HOME/Library/LaunchAgents/com.journal.daily.plist"
    
    cat > "$plist_file" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.journal.daily</string>
    <key>ProgramArguments</key>
    <array>
        <string>/bin/bash</string>
        <string>$SCRIPT_DIR/journal.sh</string>
        <string>auto</string>
    </array>
    <key>StartCalendarInterval</key>
    <array>
        <dict>
            <key>Hour</key>
            <integer>7</integer>
            <key>Minute</key>
            <integer>0</integer>
        </dict>
        <dict>
            <key>Hour</key>
            <integer>9</integer>
            <key>Minute</key>
            <integer>0</integer>
        </dict>
        <dict>
            <key>Hour</key>
            <integer>17</integer>
            <key>Minute</key>
            <integer>0</integer>
        </dict>
    </array>
    <key>StandardOutPath</key>
    <string>$JOURNAL_DIR/automation.log</string>
    <key>StandardErrorPath</key>
    <string>$JOURNAL_DIR/automation.error</string>
</dict>
</plist>
EOF
    
    launchctl unload "$plist_file" 2>/dev/null || true
    launchctl load "$plist_file"
    
    log "SUCCESS" "Enhanced automation configured for 7:00 AM (create), 9:00 AM (calendar), and 5:00 PM (all updates)"
}

# Enhanced automated execution with calendar integration
run_automation() {
    local hour=$(date +%H)
    
    case "$hour" in
        "07")
            # Morning: Create journal
            if [[ ! -f "$JOURNAL_FILE" ]]; then
                generate_journal_template
                log "INFO" "Morning automation: Journal created"
            fi
            ;;
        "09")
            # Mid-morning: Update calendar context
            if [[ -f "$JOURNAL_FILE" ]]; then
                update_calendar_context
                log "INFO" "Mid-morning automation: Calendar context updated"
            fi
            ;;
        "17")
            # Evening: Update all contexts
            if [[ -f "$JOURNAL_FILE" ]]; then
                update_all_contexts
                log "INFO" "Evening automation: All contexts updated"
            fi
            ;;
    esac
}

# ==================== UTILITY FUNCTIONS ====================

# Open journal in editor
open_journal() {
    if [[ ! -f "$JOURNAL_FILE" ]]; then
        error_exit "No journal found for today. Run 'journal.sh create' first."
    fi
    
    if command -v cursor &> /dev/null; then
        cursor "$JOURNAL_FILE"
        log "INFO" "Opened journal in Cursor"
    elif command -v code &> /dev/null; then
        code "$JOURNAL_FILE"
        log "INFO" "Opened journal in VS Code"
    else
        open "$JOURNAL_FILE"
        log "INFO" "Opened journal in default editor"
    fi
}

# Cleanup old files
cleanup() {
    local days=${1:-30}
    local cutoff_date=$(date -v-${days}d +%Y-%m-%d 2>/dev/null || date -d "$days days ago" +%Y-%m-%d)
    
    log "INFO" "Cleaning up files older than $days days (before $cutoff_date)"
    
    # Clean activity log
    if [[ -f "$TIMESTAMP_LOG" ]]; then
        grep -v "^\\[$cutoff_date" "$TIMESTAMP_LOG" > "$TIMESTAMP_LOG.tmp" || true
        mv "$TIMESTAMP_LOG.tmp" "$TIMESTAMP_LOG"
    fi
    
    # Clean old automation logs
    find "$JOURNAL_DIR" -name "*.log" -type f -mtime +$days -delete 2>/dev/null || true
    
    log "SUCCESS" "Cleanup completed"
}

# Show enhanced help with calendar commands
show_help() {
    cat << EOF
${CYAN}📝 Daily Work Journal v$VERSION${NC}
Intelligent daily journaling with Slack, Calendar, and automation

${YELLOW}USAGE:${NC}
  journal.sh [command] [options]

${YELLOW}CORE COMMANDS:${NC}
  ${GREEN}create${NC}                    Create today's journal
  ${GREEN}open${NC}                      Open journal in editor
  ${GREEN}add <section> <text>${NC}       Add timestamped entry to section
  ${GREEN}analytics${NC}                 Show journal analytics
  ${GREEN}cleanup [days]${NC}            Clean up old files (default: 30 days)

${YELLOW}INTEGRATION COMMANDS:${NC}
  ${GREEN}slack${NC}                     Update Slack context
  ${GREEN}calendar${NC}                  Update calendar context  
  ${GREEN}update${NC}                    Update all contexts (Slack + Calendar)
  ${GREEN}complete${NC}                  Mark Slack as complete
  ${GREEN}cal-complete${NC}              Mark calendar as complete
  ${GREEN}all-complete${NC}              Mark all integrations as complete

${YELLOW}AUTOMATION:${NC}
  ${GREEN}setup${NC}                     Setup automation (7 AM, 9 AM & 5 PM)
  ${GREEN}auto${NC}                      Run automated tasks (used by scheduler)

${YELLOW}HELP:${NC}
  ${GREEN}help${NC}                      Show this help

${YELLOW}EXAMPLES:${NC}
  journal.sh create                      # Create today's journal
  journal.sh calendar                    # Update calendar section with MCP commands
  journal.sh slack                       # Update Slack section with MCP commands
  journal.sh update                      # Update both Slack and Calendar
  journal.sh add "✅ Tasks" "Fixed bug"   # Add timestamped entry
  journal.sh analytics                   # View statistics
  journal.sh setup                       # Setup enhanced automation

${YELLOW}SECTIONS (for 'add' command):${NC}
  "📅 Calendar"      "✅ Tasks"         "💻 Development"    
  "💬 Team"          "🧠 Learning"      "🎉 Wins"          
  "🔮 Tomorrow"

${YELLOW}AUTOMATION SCHEDULE:${NC}
  • 07:00 - Create daily journal
  • 09:00 - Update calendar context
  • 17:00 - Update all contexts (Slack + Calendar)

EOF
}

# ==================== MAIN EXECUTION ====================

main() {
    init_directories
    
    case "${1:-help}" in
        "create"|"new")
            generate_journal_template
            ;;
        "open"|"edit")
            open_journal
            ;;
        "slack"|"update-slack")
            update_slack_context
            ;;
        "calendar"|"cal"|"update-calendar")
            update_calendar_context
            ;;
        "update"|"update-all"|"all")
            update_all_contexts
            ;;
        "complete"|"mark-complete")
            mark_slack_complete
            ;;
        "cal-complete"|"calendar-complete")
            mark_calendar_complete
            ;;
        "all-complete"|"mark-all-complete")
            mark_all_complete
            ;;
        "add")
            [[ $# -lt 3 ]] && error_exit "Usage: journal.sh add <section> <text>"
            add_entry "$2" "${*:3}"
            ;;
        "analytics"|"stats"|"status")
            show_analytics
            ;;
        "setup"|"install")
            setup_automation
            ;;
        "auto"|"automated")
            run_automation
            ;;
        "cleanup")
            cleanup "${2:-30}"
            ;;
        "help"|"--help"|"-h")
            show_help
            ;;
        *)
            echo -e "${RED}Unknown command: $1${NC}"
            echo "Run 'journal.sh help' for usage information"
            exit 1
            ;;
    esac
}

# Execute main function with all arguments
main "$@" 